---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cp-install-aimanager
spec:
  description: >-
    Task to install Aimanager.

  workspaces:
    - name: install-env
      description: A workspace containing environment variables used by install code.
    - name: install-repo
      description: A workspace containing install code.
    - name: kubeconfig
      description: A workspace containing kubeconfig to access Kubernetes.
      optional: true
  params:
    - name: kubeConfigFile
      description: KubeConfig file name.
      type: string
      default: "kubeconfig"
    - name: aiopsVersion
      description: aiops version.
      type: string
      default: "v3.3"
    - name: aiopsNamespace
      description: aiops install namespace.
      type: string
      default: "cp4waiops"
  steps:
    - name: install-aimanager
      image: alpine
      env:
      - name: PARAM_KUBECONFIG_FILE
        value: "$(params.kubeConfigFile)"
      - name: VERSION
        value: "$(params.aiopsVersion)"
      - name: AIOPS_NAMESPACE
        value: "$(params.aiopsNamespace)"
      - name: WORKSPACE_INSTALL_ENV_BOUND
        value: $(workspaces.install-env.bound)
      - name: WORKSPACE_INSTALL_ENV_PATH
        value: $(workspaces.install-env.path)
      - name: WORKSPACE_INSTALL_REPO_PATH
        value: $(workspaces.install-repo.path)
      - name: WORKSPACE_KUBECONFIG_BOUND
        value: $(workspaces.kubeconfig.bound)
      - name: WORKSPACE_KUBECONFIG_PATH
        value: $(workspaces.kubeconfig.path)
      script: |
        #!/usr/bin/env sh
        set -eu

        if [ "${WORKSPACE_INSTALL_ENV_BOUND}" != "true" ] ; then
          echo "Workspace install-env not bound!"
          exit 1
        fi

        apk add --no-cache curl jq git bash

        curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        mv ./kubectl /usr/local/bin/kubectl
        
        if [[ ${WORKSPACE_KUBECONFIG_BOUND} == "true" ]] ; then
          export KUBECONFIG=${WORKSPACE_KUBECONFIG_PATH}/${PARAM_KUBECONFIG_FILE}
        fi

        if [ -f ${WORKSPACE_INSTALL_ENV_PATH}/.env ] ; then
          export $(cat ${WORKSPACE_INSTALL_ENV_PATH}/.env | xargs)
        fi

        cd ${WORKSPACE_INSTALL_REPO_PATH}/install/aiManager-install

        ./install.sh \
          -u ${ARTIFACTORY_USER} \
          -t ${ARTIFACTORY_TOKEN} \
          -p ${CP_TOKEN} \
          -v ${VERSION} \
          -n ${AIOPS_NAMESPACE}
